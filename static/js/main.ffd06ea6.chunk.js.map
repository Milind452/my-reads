{"version":3,"sources":["Bookshelf.js","ListBook.js","BooksAPI.js","AddBook.js","App.js","index.js"],"names":["Bookshelf","props","className","title","books","map","book","style","width","height","backgroundImage","imageLinks","thumbnail","onClick","event","moveBook","target","value","disabled","authors","id","ListBooks","this","getBooks","shelves","currentlyReading","wantToRead","read","to","React","Component","api","token","localStorage","Math","random","toString","substr","headers","AddBooks","state","query","updateQuery","bind","setState","trim","prevProps","prevState","fetch","method","body","JSON","stringify","then","res","json","data","hasOwnProperty","undefined","type","placeholder","onChange","App","key","shelf","push","BooksAPI","exact","path","render","ListBook","AddBook","ReactDOM","base","document","getElementById"],"mappings":"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","file":"static/js/main.ffd06ea6.chunk.js","sourcesContent":["const Bookshelf = (props) => {\r\n    return (\r\n        <div className=\"bookshelf\">\r\n            <h2 className=\"bookshelf-title\">{props.title}</h2>\r\n            <div className=\"bookshelf-books\">\r\n                <ol className=\"books-grid\">\r\n                    {props.books.map((book) => {\r\n                        // console.log(book);\r\n                        return (\r\n                            <li key={book.id}>\r\n                                <div className=\"book\">\r\n                                    <div className=\"book-top\">\r\n                                        <div\r\n                                            className=\"book-cover\"\r\n                                            style={{\r\n                                                width: \"148px\",\r\n                                                height: \"193px\",\r\n                                                backgroundImage: `url(${book.imageLinks.thumbnail})`,\r\n                                            }}\r\n                                        ></div>\r\n                                        <div className=\"book-shelf-changer\">\r\n                                            <select\r\n                                                onClick={(event) => {\r\n                                                    props.moveBook(\r\n                                                        event.target.value,\r\n                                                        book\r\n                                                    );\r\n                                                }}\r\n                                            >\r\n                                                <option\r\n                                                    value=\"move\"\r\n                                                    disabled=\"\"\r\n                                                >\r\n                                                    Move to...\r\n                                                </option>\r\n                                                <option value=\"currentlyReading\">\r\n                                                    Currently Reading\r\n                                                </option>\r\n                                                <option value=\"wantToRead\">\r\n                                                    Want to Read\r\n                                                </option>\r\n                                                <option value=\"read\">\r\n                                                    Read\r\n                                                </option>\r\n                                                <option value=\"none\">\r\n                                                    None\r\n                                                </option>\r\n                                            </select>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"book-title\">\r\n                                        {book.title}\r\n                                    </div>\r\n                                    <div className=\"book-authors\">\r\n                                        {book.authors}\r\n                                    </div>\r\n                                </div>\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Bookshelf;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Bookshelf from \"./Bookshelf\";\r\n\r\nclass ListBooks extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getBooks();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"list-books\">\r\n                <header className=\"title\">\r\n                    <h1>My Reads</h1>\r\n                </header>\r\n                <div className=\"main-content\">\r\n                    <Bookshelf\r\n                        books={this.props.shelves.currentlyReading}\r\n                        title={\"Currently Reading\"}\r\n                        moveBook={this.props.moveBook}\r\n                    />\r\n                    <Bookshelf\r\n                        books={this.props.shelves.wantToRead}\r\n                        title={\"Want to Read\"}\r\n                        moveBook={this.props.moveBook}\r\n                    />\r\n                    <Bookshelf\r\n                        books={this.props.shelves.read}\r\n                        title={\"Read\"}\r\n                        moveBook={this.props.moveBook}\r\n                    />\r\n                </div>\r\n                <div className=\"open-search\">\r\n                    <Link to=\"/search\" className=\"btn\">\r\n                        Add a book\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListBooks;\r\n","\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as BooksAPI from \"./BooksAPI\";\r\nimport Bookshelf from \"./Bookshelf\";\r\n\r\nclass AddBooks extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            query: \"\",\r\n            books: [],\r\n        };\r\n        this.updateQuery = this.updateQuery.bind(this);\r\n    }\r\n\r\n    updateQuery(query) {\r\n        this.setState(() => ({\r\n            query: query.trim(),\r\n        }));\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.query !== this.state.query) {\r\n            BooksAPI.search(this.state.query).then((books) => {\r\n                if (\r\n                    typeof books === \"object\" &&\r\n                    books.hasOwnProperty(\"error\")\r\n                ) {\r\n                    this.setState(() => ({\r\n                        books: [],\r\n                    }));\r\n                } else if (books === undefined) {\r\n                    this.setState(() => ({\r\n                        books: [],\r\n                    }));\r\n                } else {\r\n                    this.setState(() => ({\r\n                        books: books,\r\n                    }));\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"add-books\">\r\n                <div className=\"search-bar\">\r\n                    <div className=\"close-search\">\r\n                        <Link to=\"/\" className=\"btn\">\r\n                            Close\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"search-input-wrapper\">\r\n                        <input\r\n                            className=\"search-input\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search by title or author\"\r\n                            value={this.state.query}\r\n                            onChange={(event) => {\r\n                                this.updateQuery(event.target.value);\r\n                            }}\r\n                        ></input>\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-result\">\r\n                    <Bookshelf\r\n                        books={this.state.books}\r\n                        moveBook={this.props.moveBook}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddBooks;\r\n","import React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport ListBooks from \"./ListBook\";\r\nimport AddBooks from \"./AddBook\";\r\nimport * as BooksAPI from \"./BooksAPI\";\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentlyReading: [],\r\n            wantToRead: [],\r\n            read: [],\r\n        };\r\n        this.getBooks = this.getBooks.bind(this);\r\n        this.moveBook = this.moveBook.bind(this);\r\n    }\r\n\r\n    getBooks() {\r\n        BooksAPI.getAll().then((books) => {\r\n            let currentlyReading = [];\r\n            let wantToRead = [];\r\n            let read = [];\r\n            for (let key in books) {\r\n                const book = books[key];\r\n                if (book.shelf === \"currentlyReading\") {\r\n                    currentlyReading.push(book);\r\n                } else if (book.shelf === \"wantToRead\") {\r\n                    wantToRead.push(book);\r\n                } else {\r\n                    read.push(book);\r\n                }\r\n            }\r\n            this.setState(() => ({\r\n                currentlyReading: currentlyReading,\r\n                wantToRead: wantToRead,\r\n                read: read,\r\n            }));\r\n        });\r\n    }\r\n\r\n    moveBook(value, book) {\r\n        if (value !== \"move\" && value !== \"none\" && value !== book.shelf) {\r\n            BooksAPI.update(book, value).then(this.getBooks);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const shelves = {\r\n            currentlyReading: this.state.currentlyReading,\r\n            wantToRead: this.state.wantToRead,\r\n            read: this.state.read,\r\n        };\r\n        return (\r\n            <div className=\"app\">\r\n                <Route\r\n                    exact\r\n                    path=\"/\"\r\n                    render={() => (\r\n                        <ListBooks\r\n                            shelves={shelves}\r\n                            getBooks={this.getBooks}\r\n                            moveBook={this.moveBook}\r\n                        />\r\n                    )}\r\n                ></Route>\r\n                <Route\r\n                    path=\"/search\"\r\n                    render={() => <AddBooks moveBook={this.moveBook} />}\r\n                ></Route>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <HashRouter base=\"/\">\n        <App />\n    </HashRouter>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}